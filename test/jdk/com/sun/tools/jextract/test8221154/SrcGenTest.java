/*
 * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import java.foreign.memory.Pointer;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.spi.ToolProvider;
import org.testng.annotations.Test;
import static org.testng.Assert.assertTrue;

/*
 * @test
 * @bug 8221154
 * @summary jextract should generate java source files
 * @library ..
 * @run testng SrcGenTest
 */
public class SrcGenTest extends JextractToolRunner {
    private static final ToolProvider JEXTRACT = ToolProvider.findFirst("jextract")
            .orElseThrow(() ->
                    new RuntimeException("jextract tool not found")
            );

    private static final ToolProvider JAVAC = ToolProvider.findFirst("javac")
            .orElseThrow(() ->
                    new RuntimeException("javac tool not found")
            );

    @Test
    public void test() throws IOException {
        Path inputDir = Paths.get(System.getProperty("test.src", "."));
        Path outputDir = Paths.get(System.getProperty("test.classes", "."));
        inputDir = inputDir.toAbsolutePath();
        outputDir = outputDir.toAbsolutePath();
        String pkgName = "test8221154";
        Path jarPath = outputDir.resolve(pkgName + ".jar");

        // run jextract with --src-dump-dir option
        ArrayList<String> jextrOpts = new ArrayList<>();
        jextrOpts.add("-C-nostdinc");
        jextrOpts.add("-I");
        jextrOpts.add(inputDir.toString());
        jextrOpts.add("-o");
        jextrOpts.add(jarPath.toString());
        jextrOpts.add("--src-dump-dir");
        jextrOpts.add(outputDir.toString());
        jextrOpts.add("-t");
        jextrOpts.add(pkgName);
        jextrOpts.add("-l");
        jextrOpts.add("srcgentest");
        jextrOpts.add(inputDir + File.separator + "srcgentest.h");

        int result = JEXTRACT.run(System.out, System.err, jextrOpts.toArray(String[]::new));
        if (result != 0) {
            throw new RuntimeException(JEXTRACT.name() + " returns non-zero value");
        }

        // delete .jar file generated by jextract
        Files.delete(jarPath);

        Path pkgDir = outputDir.resolve(pkgName);
        // compile jextract generated java sources
        ArrayList<String> javacOpts = new ArrayList<>();
        javacOpts.add("-d");
        javacOpts.add(outputDir.toString());
        javacOpts.add(pkgDir + File.separator + "srcgentest.java");
        javacOpts.add(pkgDir + File.separator + "srcgentest_h.java");
        result = JAVAC.run(System.out, System.err, javacOpts.toArray(String[]::new));
        if (result != 0) {
            throw new RuntimeException(JAVAC.name() + " returns non-zero value");
        }

        // sanity checks for .class file existence
        assertTrue(Files.isRegularFile(pkgDir.resolve("srcgentest.class")));
        assertTrue(Files.isRegularFile(pkgDir.resolve("srcgentest$Point.class")));
        assertTrue(Files.isRegularFile(pkgDir.resolve("srcgentest$Color.class")));
        assertTrue(Files.isRegularFile(pkgDir.resolve("srcgentest_h.class")));
        assertTrue(Files.isRegularFile(pkgDir.resolve("srcgentest_h$Color.class")));

        checkClasses(outputDir, pkgName);
    }

    private void checkClasses(Path outputDir, String pkgName) {
        Loader loader = classLoader(outputDir);
        Class<?> forwarderCls = loader.loadClass(pkgName + ".srcgentest_h");
        assertTrue(forwarderCls != null);

        // check "sum" method
        Method sumMethod = findFirstMethod(forwarderCls, "sum");
        assertTrue(sumMethod.getReturnType() == int.class);
        Class<?>[] sumParamTypes = sumMethod.getParameterTypes();
        assertTrue(sumParamTypes.length == 2);
        assertTrue(sumParamTypes[0] == int.class);
        assertTrue(sumParamTypes[1] == Object[].class);
        assertTrue(Modifier.isStatic(sumMethod.getModifiers()));

        // check "x_coord" method
        Method xCoordMethod = findFirstMethod(forwarderCls, "x_coord");
        assertTrue(xCoordMethod.getReturnType() == int.class);
        Class<?>[] xCoordParamTypes = xCoordMethod.getParameterTypes();
        assertTrue(xCoordParamTypes.length == 1);
        assertTrue(xCoordParamTypes[0] == Pointer.class);

        // check "y_coord" method
        Method yCoordMethod = findFirstMethod(forwarderCls, "y_coord");
        assertTrue(yCoordMethod.getReturnType() == int.class);
        Class<?>[] yCoordParamTypes = yCoordMethod.getParameterTypes();
        assertTrue(yCoordParamTypes.length == 1);
        assertTrue(yCoordParamTypes[0] == Pointer.class);

        // global variable "num" getter
        Method numGet = findGlobalVariableGet(forwarderCls, "num");
        assertTrue(numGet != null);

        // anonymous enum fields
        assertTrue(findField(forwarderCls, "R") != null);
        assertTrue(findField(forwarderCls, "G") != null);
        assertTrue(findField(forwarderCls, "B") != null);

        // enum interface class
        Class<?> colorCls = Arrays.stream(forwarderCls.getClasses())
            .filter(c -> c.getSimpleName().equals("Color")).findFirst().get();
        assertTrue(Modifier.isInterface(colorCls.getModifiers()));
        checkIntField(colorCls, "RED", 0);
        checkIntField(colorCls, "GREEN", 1);
        checkIntField(colorCls, "BLUE", 2);
    }
}
