// Generated by jextract

import jdk.incubator.foreign.FunctionDescriptor;
import jdk.incubator.foreign.LibraryLookup;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.SystemABI;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Optional;

public class RuntimeHelper {

    private final static SystemABI ABI = SystemABI.getInstance();

    private final static ClassLoader LOADER = RuntimeHelper.class.getClassLoader();

    private final static MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();

    static final LibraryLookup[] libraries(String[] libNames, String[] libPaths) {
        if (libNames.length == 0) {
            return new LibraryLookup[]{LibraryLookup.ofDefault()};
        } else {
            Path[] paths = Arrays.stream(libPaths).map(Paths::get).toArray(Path[]::new);
            return Arrays.stream(libNames).map(libName -> {
                Optional<Path> absPath = findLibraryPath(paths, libName);
                return absPath.isPresent() ?
                        LibraryLookup.ofPath(MH_LOOKUP, absPath.get().toString()) :
                        LibraryLookup.ofLibrary(MH_LOOKUP, libName);
            }).toArray(LibraryLookup[]::new);
        }
    }

    private static final Optional<Path> findLibraryPath(Path[] paths, String libName) {
        return Arrays.stream(paths).
                map(p -> p.resolve(System.mapLibraryName(libName))).
                filter(Files::isRegularFile).map(Path::toAbsolutePath).findFirst();
    }

    private static final Optional<MemoryAddress> lookup(LibraryLookup[] LIBRARIES, String sym) {
        for (LibraryLookup l : LIBRARIES) {
            try {
                return Optional.of(l.lookup(sym));
            } catch (Throwable t) {
            }
        }
        try {
            return Optional.of(LibraryLookup.ofDefault().lookup(sym));
        } catch (Throwable t) {
            return Optional.empty();
        }
    }

    public static final MemoryAddress lookupGlobalVariable(LibraryLookup[] LIBRARIES, String name) {
        return lookup(LIBRARIES, name).orElse(null);
    }

    public static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc) {
        return lookup(LIBRARIES, name).map(
                addr -> ABI.downcallHandle(addr,
                                           MethodType.fromMethodDescriptorString(desc, LOADER),
                                           fdesc)).orElse(null);
    }

    public static final MemoryAddress upcallStub(MethodHandle handle, FunctionDescriptor fdesc) {
        return ABI.upcallStub(handle, fdesc);
    }

    public static final <Z> MemoryAddress upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc) {
        try {
            MethodHandle handle = MH_LOOKUP.findVirtual(fi, "apply",
                    MethodType.fromMethodDescriptorString(mtypeDesc, LOADER));
            handle = handle.bindTo(z);
            return upcallStub(handle, fdesc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
}
